
#nginx常用命令
#启动 ./nginx
#ps -ef|grep nginx;
#停止 ./nginx -s quit / kill -9 pid
#重启  ./nginx -s reload
#指定配置文件启动 /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx-aa.conf // 绝对路径
#指定配置文件重启 /usr/local/nginx/sbin/nginx -s reload -c /usr/local/nginx/conf/nginx.conf


#-------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------
#配置Nginx用户，没有特殊要求默认值（nobody）就可以,设置用户名可以更精确控制访问权限
user  nobody;
#工作进程数,通常设置成和cpu的数量相等
worker_processes  1; #根据cat /proc/cpuinfo | grep 'processor' | wc -l或者直接指定auto
#日志存放目录，默认在当前Nginx目录#制定日志路径，级别。
#这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  notice;
#将nginx启动后的进程id放到该文件
pid        logs/nginx.pid;


events {
	#惊群现象
		#简单来说就是多个进程或者线程在等待同一个事件，当事件发生时，所有线程和进程都会被内核唤醒。唤醒后通常只有一个进程获得了该事件并进行处理，
	accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on
    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off

	#工作模式
    use epoll;      	#事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport
						#epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型
    					#如果FreeBSD，要用kqueue模型
	
	#单个worker process进程的最大连接数数，默认为512
    worker_connections  1024;
						#并发总数是worker_processes和worker_connections的乘积：
						#即max_clients=worker_processes*worker_connections
						#max_clients的值须小于系统全局可以打开的最大文件数-察看：cat /proc/sys/fs/file-max`
}


http {
		#文件扩展名与文件类型映射表 include可以引入拆分的配置文件，可以放到任何地方
    	include       mime.types;
		#默认文件类型，默认为text/plain定义的对应关系来告诉浏览器如何处理服务器传给浏览器的这个文件，是打开还是下载，
		#可以指定每个请求返回类型
    	default_type  application/octet-stream;
		#取消服务日志
		access_log off;
		#配置写入日志格式    
    	#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    	#                  '$status $body_bytes_sent "$http_referer" '
    	#                  '"$http_user_agent" "$http_x_forwarded_for"';

    	#access_log  logs/access.log  main;

		#sendfile = off 时，应用程序读取磁盘中的文件以字节流的形式从磁盘中加载文件，然后再将文件以字节流的形式复制到内核中。内核在把文件推送到NC。
		#sendfile = on 时，应用程序直接向内核发送指令，让内核去读文件。读完文件内核直接推送给NC。只有一次复制操作，实现异步网络IO形式。因此，性能会有很大的提升。
		#具体还要根据实际使用情况来配置sendfile。当读取服务不能解析大量的文件时。还是建议将sendfile配置为off
    	sendfile        on;
		#tcp_nopush：该指令必须在sendfile打开的状态下才会生效，主要是用来提升网络包的传输'效率'，可以放在http、server、location
    	tcp_nopush     on;

		#tcp_nodelay：该指令必须在keep-alive连接开启的情况下才生效，来提高网络包传输的'实时性',可以放在http、server、location
		tcp_nodelay on;

		#keep-alive长连接配置
		#keepalive_timeout  0;    # 超时时间为 0 表示不使用 TCP 长连接
		keepalive_timeout  65; 
		keepalive_disable msie6; # 禁用相关浏览器
		keepalive_requests 1000;#一个长连接同时并发链接数。 一般1000个足够了。
		keepalive_time 1h; # 链接时间超过1小时强制关闭
 		send_timeout 60;# 发送数据至客户端超时, 默认60s, 如果连续的60s内客户端没有收到1个字节, 连接关闭

		#支持长连接的ip_hash配置 每个请求按照访问ip（即Nginx的前置服务器或者客户端IP）的hash结果分配，
		#这样每个访客会固定访问一个后端服务器，可以解决session一致问题。
		#parameters参数 
			#down：表示当前server已停用
			#backup：表示当前server是备用服务器，只有其它非backup后端服务器都挂掉了或者很忙才会分配到请求
			#weight：表示当前server负载权重，权重越大被请求几率越大。默认是1.
			#max_fails和fail_timeout一般会关联使用，如果某台server在fail_timeout时间内出现了max_fails次连接失败，
				#那么Nginx会认为其已经挂掉了，从而在fail_timeout时间内不再去请求它，fail_timeout默认是10s，max_fails默认是1，
				#即默认情况是只要发生错误就认为服务器挂掉了，如果将max_fails设置为0，则表示取消这项检查
		upstream keepAliveServer {
			ip_hash; #根据ip计算hash代理到服务器
			keepalive 32;#向上游服务器保留的连接数，线程池
			keepalive_timeout 65;
			keepalive_requests 1000;
			server www.test.com:8002;
			server www.test.com:8003;
    	}
		#轮询  
		upstream loopServer{
			server 192.168.1.101:8888;
            server 192.168.1.102:8888;
            server 192.168.1.103:8888;
			#Upstream模块下 server指令的参数，设置了某一个upstream后端失败了指定次数（max_fails）后，
			#该后端不可操作的时间，默认为10秒
			proxy_upstream_fail_timeout 3;
		}
		#weight
		upstream weightServer{
			server 192.168.1.101 weight=1;
            server 192.168.1.102 weight=2;
            server 192.168.1.103 weight=3;
		}
		#fair  公平地按照后端服务器的响应时间（rt）来分配请求，响应时间短即rt小的后端服务器优先分配请求
		upstream fairServer {
            server 192.168.1.101;
            server 192.168.1.102;
            server 192.168.1.103;
            fair;
        }
		#url_hash与ip_hash类似，但是按照访问url的hash结果来分配请求，
		#使得每个url定向到同一个后端服务器，主要应用于后端服务器为缓存时的场景下。
		upstream urlhashServer {
            server 192.168.1.101;
            server 192.168.1.102;
            server 192.168.1.103;
            hash $request_uri;
            hash_method crc32;
        }
		
		#Nginx分配给请求数据的Buffer大小，如果请求的数据小于client_body_buffer_size直接将数据先在内存中存储。
		#如果请求的值大于client_body_buffer_size小于client_max_body_size，就会将数据先存储到临时文件中
		client_body_buffer_size 16K;

		#配置的client_body_temp地址，一定让执行的Nginx的用户组有读写权限。否则，
		#当传输的数据大于client_body_buffer_size，写进临时文件失败会报错。
		client_body_temp /temp/.
		
		#如果(请求行+请求头)的大小如果没超过1k，放行请求
    	client_header_buffer_size 1k;
		#请求行(request line)的大小不能超过8k，否则返回414错误
		#请求行(包含了请求方式、请求资源的路径、遵循的协议及版本)
		#(请求行+请求头)的大小不能超过32k(4 * 8k)
		large_client_header_buffers 4 8k;

		#客户端请求服务器最大允许大小在“Content-Length”请求头中指定。
		#如果请求的正文数据大于client_max_body_size，HTTP协议会报错 413 Request Entity Too Large。
		#就是说如果请求的正文大于client_max_body_size，一定是失败的。如果需要上传大文件，一定要修改该值。
    	client_max_body_size 200m;
    	large_client_header_buffers 4 8k;

		#该指令设置请求体（request body）的读超时时间。仅当在一次readstep中，没有得到请求体，就会设为超时。
		#超时后，nginx返回HTTP状态码408(“Request timed out”)
    	client_body_timeout 60;

		#指定等待client发送一个请求头的超时时间（例如：GET / HTTP/1.1）.仅当在一次read中，没有收到请求头，才会算成超时。
		#如果在超时时间内，client没发送任何东西，nginx返回HTTP状态码408(“Request timed out”)
    	client_header_timeout 60;
		send_timeout 60;

		#该指令设置DNS解析超时时间
		resolver_timeout 30;

		#后端服务器连接的超时时间_发起握手等候响应超时时间 默认秒
		proxy_connect_timeout 120;
		#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）默认秒
    	proxy_read_timeout 600;
		#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据 默认秒
    	proxy_send_timeout 120;

		#该指令开启从后端被代理服务器的响应内容缓冲。
		#如果缓冲区开启,nginx假定被代理的后端服务器会以最快速度响应,
		#并把内容保存在由指令 proxy_buffer_size 和 proxy_buffers指定的缓冲区里边
		#如果响应内容无法放在内存里边,那么部分内容会被写到磁盘上。如果缓冲区被关闭了,
		#那么响应内容会按照获取 内容的多少立刻同步传送到客户端。
		#nginx不尝试计算被代理服务器整个响应内容的大小,nginx能从服务器接受的最大数据,
		#是由指令 proxy_buffer_size指定的.对于基于长轮询(long-polling)的Comet 应用来说,
		#关闭 proxy_buffering 是重要的,不然异步响应将被缓存导致Comet无法工作。
		proxy_buffering on;

		#该指令设置缓冲区大小,从代理后端服务器取得的第一部分的响应内容,会放到这里.小的响应header通常位于这部分响应内容里边.
		#默认来说,该缓冲区大小等于指令 proxy_buffers所设置的;但是,你可以把它设置得更小.
		#无论proxy_buffering是否开启，proxy_buffer_size（main buffer）都是工作的，proxy_buffer_size所设置的buffer_size的作用是用来存储upstream端response的header。
    	proxy_buffer_size 1024k;
		#该指令设置缓冲区的大小和数量,从被代理的后端服务器取得的响应内容,会放置到这里.
		#默认情况下,一个缓冲区的大小等于内存页面大小,可能是4K也可能是8K,这取决于平台。
    	proxy_buffers 16 1024k;
		#http,server,location,if
		#一旦proxy_buffers设置的buffer被写入，直到buffer里面的数据被完整的传输完（传输到客户端），
		#这个buffer将会一直处 在busy状态，我们不能对这个buffer进行任何别的操作。
		#所有处在busy状态的buffer size加起来不能超过proxy_busy_buffers_size，
		#所以proxy_busy_buffers_size是用来控制同时传输到客户 端的buffer数量的。
    	proxy_busy_buffers_size 2048k;
    	proxy_temp_file_write_size 2048k;

    	#gzip  on;

	server {
		#监听端口
		listen 8100;
		#设置server name，可以以空格隔开写多个并支持正则表达式，如*.magedu.com www.magedu.*
		server_name test.com
		#设置编码格式，默认是俄语格式，可以改为utf-8
		charset utf-8;
		# gzip config
		#开启gzip
		gzip on;
		
		#低于1kb的资源不压缩
		gzip_min_length 1k;
		#压缩级别1-9，越大压缩率越高，同时消耗cpu资源也越多，建议设置在5左右
		gzip_comp_level 9;
		#需要压缩哪些响应类型的资源，多个空格隔开。不建议压缩图片.
		gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
		#是否添加“Vary: Accept-Encoding”响应头
		gzip_vary on;
		#配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）
		gzip_disable "MSIE [1-6]\.";

		root /data/web/platform;
		
		#location /www/ {
		#	root /home/data;
		#}
		#访问路径：http://www.abc.com/www/a.html，实际上是访问/home/data/www/a.html。
		#location /www/ {
		#	alias /home/data;
		#}
		#二级目录静态资源配置 last解决刷新页面问题
		location /platform/ {
			alias /data/web/platform1;
			try_files $uri $uri/ /index.html last;
		}
		location / {
			# 用于配合 browserHistory使用
			try_files $uri $uri/ /index.html;

			# 如果有资源，建议使用 https + http2，配合按需加载可以获得更好的体验
			# rewrite ^/(.*)$ https://preview.pro.ant.design/$1 permanent;
			
			add_header Access-Control-Allow-Origin *;
			add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
			add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
			#add_header Access-Control-Allow-Origin 'http://10.99.43.20:8000,http://10.99.43.20:8005';
			#add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS';
			#add_header Access-Control-Allow-Credentials 'true';
			#add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
			
			if ($request_method = 'OPTIONS') {
				return 204;
			}
		}


		location /gp {
			root /data/front/uat;
        		try_files $uri $uri/ /gp/index.html;
            		expires -1;
            		etag on;
            		if_modified_since before;
        	}

		#proxy_pass代理地址端口后无任何字符，转发后地址：代理地址+访问URL目录部分
		#proxy_pass代理地址端口后有目录(包括 / )，转发后地址：代理地址+访问URL目录部分去除location匹配目录
		location /api {
			proxy_pass http://172.17.8.195:7000;
			proxy_set_header   X-Forwarded-Proto $scheme;
			proxy_set_header   X-Real-IP         $remote_addr;
		}
		location /react {
			alias /data/web/platform1/react;
		}
		#多游戏分区代理，客户端请求 :wss://www.ooxx.com/zone?host=134.175.33.159&port=8888
		location /zone {
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_read_timeout 86400;
                proxy_pass http://$arg_host:$arg_port;
        }
	}

	# h5
	server {
		listen 8500;
		server_name  localhost;
		root /data/web/h5;

		# gzip config
		gzip on;
		gzip_min_length 1k;
		gzip_comp_level 9;
		gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
		gzip_vary on;
		gzip_disable "MSIE [1-6]\.";

		location / {
					# 用于配合 browserHistory使用
					try_files $uri $uri/ /index.html;

					# 如果有资源，建议使用 https + http2，配合按需加载可以获得更好的体验
					# rewrite ^/(.*)$ https://preview.pro.ant.design/$1 permanent;
					
					add_header Access-Control-Allow-Origin *;
					add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
					add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
					#add_header Access-Control-Allow-Origin 'http://10.99.43.20:8000,http://10.99.43.20:8005';
					#add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS';
					#add_header Access-Control-Allow-Credentials 'true';
					#add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
					
					if ($request_method = 'OPTIONS') {
						return 204;
					}
				}

		location /api {
				proxy_pass http://172.17.8.195:7000;
				proxy_set_header   X-Forwarded-Proto $scheme;
				proxy_set_header   X-Real-IP         $remote_addr;
			}

	}
	
}
